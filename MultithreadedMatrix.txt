package DAA;
import java.util.concurrent.*;
import java.util.*;

public class MultithreadedMultiplication {

    // Sequential matrix multiplication
    public static void sequentialMatrixMultiplication(int[][] A, int[][] B, int[][] C, int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = 0;
                for (int k = 0; k < n; k++) {
                    C[i][j] += A[i][k] * B[k][j];
                }
            }
        }
    }

    // Optimized multithreaded matrix multiplication
    public static void multithreadedMatrixMultiplication(int[][] A, int[][] B, int[][] C, int n) throws InterruptedException {
        int threads = Runtime.getRuntime().availableProcessors(); // Using available processors
        ExecutorService executor = Executors.newFixedThreadPool(threads);

        List<Future<Void>> futures = new ArrayList<>();

        // Divide work by rows or blocks
        for (int i = 0; i < n; i++) {
            final int row = i;
            futures.add(executor.submit(() -> {
                for (int j = 0; j < n; j++) {
                    C[row][j] = 0;
                    for (int k = 0; k < n; k++) {
                        C[row][j] += A[row][k] * B[k][j];
                    }
                }
                return null;
            }));
        }

        // Wait for all threads to finish
        for (Future<Void> future : futures) {
            try {
                future.get(); // Wait for thread completion
            } catch (ExecutionException e) {
                e.printStackTrace();
            }
        }

        executor.shutdown();
    }

    // Main function to run both sequential and multithreaded matrix multiplication
    public static void main(String[] args) throws InterruptedException {
        int n = 1000;  // Example matrix size
        int[][] A = new int[n][n];
        int[][] B = new int[n][n];
        int[][] C = new int[n][n];

        // Initialize matrices A and B with random values
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = (int) (Math.random() * 10);
                B[i][j] = (int) (Math.random() * 10);
            }
        }

        // Sequential matrix multiplication
        long startTime = System.nanoTime();
        sequentialMatrixMultiplication(A, B, C, n);
        long endTime = System.nanoTime();
        System.out.println("Time taken for sequential matrix multiplication: " + (endTime - startTime) / 1000000 + " ms");

        // Reset result matrix C for multithreaded multiplication
        Arrays.stream(C).forEach(row -> Arrays.fill(row, 0));

        // Multithreaded matrix multiplication
        startTime = System.nanoTime();
        multithreadedMatrixMultiplication(A, B, C, n);
        endTime = System.nanoTime();
        System.out.println("Time taken for multithreaded matrix multiplication: " + (endTime - startTime) / 1000000 + " ms");
    }
}











































### **Algorithms Analysis**

#### **1. Sequential Matrix Multiplication**
**Algorithm:**  
- Multiply each row of matrix \(A\) with each column of matrix \(B\) to compute the resulting matrix \(C\).  
- Nested loops are used to traverse rows (\(i\)), columns (\(j\)), and elements for dot product (\(k\)).  

**Time Complexity:**  
- **Worst Case:** \(O(n^3)\), due to three nested loops iterating over rows, columns, and elements for multiplication.  

**Space Complexity:**  
- **In-place:** \(O(n^2)\), as the result matrix \(C\) requires space proportional to the size of the matrices.  

---

#### **2. Multithreaded Matrix Multiplication**
**Algorithm:**  
- Divide work by rows or blocks.  
- Assign computation for each row of \(C\) to a separate thread.  
- Synchronize and combine results using thread management (`ExecutorService` and `Future`).  

**Time Complexity:**  
- **Best Case:** \(O(n^3 / p)\), where \(p\) is the number of available processors (threads).  
- **Worst Case:** \(O(n^3)\), when only one thread is effectively used or thread overhead dominates.  

**Space Complexity:**  
- **In-place:** \(O(n^2)\) for the result matrix \(C\).  
- **Additional Space:** \(O(p)\) for managing thread pools and futures.

---

### **Comparison Summary**

| **Algorithm**          | **Time Complexity**    | **Space Complexity** | **Key Insights**                              |
|-------------------------|------------------------|-----------------------|-----------------------------------------------|
| Sequential Multiplication | \(O(n^3)\)           | \(O(n^2)\)           | Simple implementation but slower for large \(n\). |
| Multithreaded Multiplication | \(O(n^3 / p)\) (best case) | \(O(n^2) + O(p)\)   | Faster for large \(n\), but incurs threading overhead. |






